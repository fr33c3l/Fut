@rendermode InteractiveServer
@page "/players"
@using BlazorApp.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

@attribute [StreamRendering]

<PageTitle>Players</PageTitle>

<div class="container">
	<div class="main-body">

		<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Modal title</h5>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						<p>Modal body text goes here.</p>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary">Save changes</button>
						<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
					</div>
				</div>
			</div>
		</div>


		@if (ShowBackdrop) {
			<div class="modal-backdrop fade show"></div>
		}

		<div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 gutters-sm">
			<div class="col mb-3">
				<div class="card">
					<img src="https://www.bootdey.com/image/340x120/FFB6C1/000000" alt="Cover" class="card-img-top">
					<div class="card-body text-center">
						<img src="https://bootdey.com/img/Content/avatar/avatar7.png" style="width:100px;margin-top:-65px" alt="User" class="img-fluid img-thumbnail rounded-circle border-0 mb-3">
						<h5 class="card-title">John Doe</h5>
						<p class="text-secondary mb-1">Full Stack Developer</p>
						<p class="text-muted font-size-sm">Bay Area, San Francisco, CA</p>
					</div>
					<div class="card-footer">
						<button class="btn btn-primary" @onclick="Open">Add New Forecast</button>
					</div>
				</div>
			</div>
			@foreach (var player in players) {
				<div class="col mb-3">
					<div class="card">
						<img src="https://www.bootdey.com/image/340x120/FF8C00/000000" alt="Cover" class="card-img-top">
						<div class="card-body text-center">
							<img src="https://bootdey.com/img/Content/avatar/avatar1.png" style="width:100px;margin-top:-65px" alt="User" class="img-fluid img-thumbnail rounded-circle border-0 mb-3">
							<h5 class="card-title">@player.name</h5>
							<p class="text-secondary mb-1">Full Stack Developer</p>
							<p class="text-muted font-size-sm">Bay Area, San Francisco, CA</p>
						</div>
						<div class="card-footer">
							<button class="btn btn-light btn-sm bg-white has-icon btn-block" type="button"><i class="material-icons">add</i>Follow</button>
							<button class="btn btn-light btn-sm bg-white has-icon ml-2" type="button"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-message-circle"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path></svg></button>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
</div>

@code {

	private List<PlayersModel> players = new();
	public Guid Guid = Guid.NewGuid();
	public string ModalDisplay = "none;";
	public string ModalClass = "";
	public bool ShowBackdrop = false;

	public void Open() {
		ModalDisplay = "block;";
		ModalClass = "Show";
		ShowBackdrop = true;
		StateHasChanged();
	}

	public void Close() {
		ModalDisplay = "none";
		ModalClass = "";
		ShowBackdrop = false;
		StateHasChanged();
	}
	protected override async Task OnInitializedAsync() {
		var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7264/api/Players");
		var client = ClientFactory.CreateClient();
		var response = await client.SendAsync(request);
		if (response.IsSuccessStatusCode) {
			using var responseStream = await response.Content.ReadAsStreamAsync();
			players = await JsonSerializer.DeserializeAsync<List<PlayersModel>>(responseStream);
		}
		else {
			Console.WriteLine("Error");
		}
	}
}